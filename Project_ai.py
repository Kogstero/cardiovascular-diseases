# -*- coding: utf-8 -*-
"""Проект ИИ.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YofDZSe-Bxs_6qY1NUSVMiJDCcqOl_G2

Получаем данные для обучения модели из открытых источников. Были взяты данные для обучения ИИ по определению вероятности сердечно-сосудитсых заболеваний.
"""

# Импортируем библиотеки
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Загрузка данных
data = pd.read_csv('/content/train_case2.csv', sep=';') # cardio.csv - название файла (может быть любым)
print(data.head()) # вывод первых пяти строк таблицы, чтоыбы убедится в правильности загруженных данных
print(data.info())
print(data.describe())

"""Подготовка данных для обучения модели

"""

# Импортируем библиотеки
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Обработка некоторых данных
data['age_years'] = data['age'] / 365.25 # Возраст указан в днях, конвертируем его в года
data['gender'] = data['gender'] - 1  # 0/1 (вычитаем 1 чтобы было 0/1, а не 1/2)
data['bmi'] = data['weight'] / (data['height'] / 100) ** 2  # Добавим BMI (индекс массы тела)

# Разделение на X и y
X = data.drop(['cardio', 'age', 'id'], axis=1)  # Удаляем лишнее
y = data['cardio'] # Целевая переменная

# Разделение на train/test (20% на тест, 80% на обучение)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Масштабирование
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""Обучение модели через "Дерево решений". Необязательно, но может использоваться. Врачи/заказчики часто требуют прозрачности (дерево > нейросеть)."""

# from sklearn.tree import DecisionTreeClassifier
# from sklearn.metrics import classification_report, roc_auc_score

# # Обучение
# dt = DecisionTreeClassifier(max_depth=5, random_state=42)
# dt.fit(X_train_scaled, y_train)

# # Оценка
# y_pred = dt.predict(X_test_scaled)
# print(classification_report(y_test, y_pred))
# print("ROC-AUC:", roc_auc_score(y_test, y_pred))

# from sklearn.tree import plot_tree
# plt.figure(figsize=(20, 10))
# plot_tree(dt, feature_names=X.columns, filled=True)
# plt.show()

"""Обучение модели"""

# Импорт необходимых классов из Keras для построения нейронной сети
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)), # Первый скрытый слой с 64 нейронами и ReLU-активацией
    Dropout(0.3), # Слой регуляризации, "выключающий" 30% нейронов случайным образом
    Dense(32, activation='relu'), # Второй скрытый слой с 32 нейронами
    Dense(1, activation='sigmoid') # Выходной слой с 1 нейроном и сигмоидной активацией (для бинарной классификации)
])

# Компиляция модели с настройками обучения
model.compile(
    optimizer='adam', # Оптимизатор Adam
    loss='binary_crossentropy', # Функция потерь для бинарной классификации
    metrics=['accuracy'] # Метрика - точность
)

# Обучение модели
history = model.fit(
    X_train_scaled, # Масштабированные обучающие данные
    y_train,  # Целевые значения
    epochs=20, # Количество эпох обучения
    batch_size=32, # Размер батча
    validation_split=0.2 # Доля данных для валидации
)

"""Функция для преобразования данных и вывода итогового предсказания"""

def predict_heart_disease(age_years, gender, height, weight, ap_hi, ap_lo,
                         cholesterol, gluc, smoke, alco, active):
    # Конвертация возраста в дни
    age_days = age_years * 365.25

    input_data = {
        'age': age_days, 'gender': gender, 'height': height, 'weight': weight,
        'ap_hi': ap_hi, 'ap_lo': ap_lo, 'cholesterol': cholesterol, 'gluc': gluc,
        'smoke': smoke, 'alco': alco, 'active': active
    }

    # Преобразование в DataFrame
    df = pd.DataFrame([input_data])
    df['age_years'] = df['age'] / 365.25  # Обратно в годы
    df['gender'] = df['gender'] - 1
    df['bmi'] = df['weight'] / (df['height'] / 100) ** 2
    df = df.drop(['age'], axis=1)

    # Масштабирование и предсказание
    scaled_data = scaler.transform(df)
    risk_percent = model.predict(scaled_data)[0][0] * 100
    return f"Риск заболевания: {risk_percent:.1f}%"

"""Ввод данных пользователя и вывод результата"""

age_years = float(input("• Возраст (лет): "))
gender = int(input("• Пол (1 — женщина, 2 — мужчина): "))
height = float(input("• Рост (см): "))
weight = float(input("• Вес (кг): "))
ap_hi = int(input("• Верхнее давление (мм рт.ст.): "))
ap_lo = int(input("• Нижнее давление (мм рт.ст.): "))

print("\nХолестерин:")
print("  1 — норма")
print("  2 — выше нормы")
print("  3 — значительно выше нормы")
cholesterol = int(input("• Ваш уровень (1-3): "))

print("\nГлюкоза:")
print("  1 — норма")
print("  2 — выше нормы")
print("  3 — значительно выше нормы")
gluc = int(input("• Ваш уровень (1-3): "))

smoke = int(input("\n• Курите (1 — да, 0 — нет): "))
alco = int(input("• Употребляете алкоголь (1 — да, 0 — нет): "))
active = int(input("• Занимаетесь спортом (1 — да, 0 — нет): "))

print(predict_heart_disease (
    age_years, gender, height, weight,
    ap_hi, ap_lo, cholesterol, gluc,
    smoke, alco, active))